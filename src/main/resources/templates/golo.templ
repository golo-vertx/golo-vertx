@comment{"Templating! The next row outputs all interfaces annotated with VertxGen-annotation."}

@code{

  def splitHelper(toSplit, splitter) {
    var array = [];
    var start = 0;
    for(int i = 0; i<toSplit.length(); i++) {
        if(toSplit.substring(i, i+1).equals(splitter)) {
            array.add(toSplit.substring(start, i));
            start = i + 1;
        }
    }
    array.add(toSplit.substring(start, toSplit.length()));
    return array;
  }

  def parseGenericName(method) {
    var retType = splitHelper(method.toString(), " ")[0];
    var identifier = "name=";
    var startIndex = retType.indexOf(identifier);
    return retType.substring(startIndex+identifier.length(),startIndex+identifier.length()+1);
  }

  def countGenerics(method) {
    var count = 0;
    for(int i = 0; i<method.toString() -3 ; i++) {
        if(method.toString().substring(i, i+4).equals("Type")) {
            count = count + 1;
        }
    }
    return count;
  }

  def typeCheck(method) {
     var gen = "";
     var str = method.toString();
     var generics = "";
     var genCount = countGenerics(method);
     if(genCount > 0) {
        return genCount;
     }
     // THIS DOES NOT WORK YET
     for(int i = 0; i<str.length()-1; i++) {
             if(str.substring(i, i+2).equals("]>")) {
                 gen = parseGenericName(method);
                 generics = generics + gen +",";
             }
          }
          if(generics.length() > 0) {
             generics = generics.substring(0, generics.length() -1);
             return "<"+generics+">" + splitHelper(method.toString(), " ")[0];
          }

     return str;
  }

  def genGoloModuleName(type) {
    return type.raw.translatePackageName("golo");
  }

   def className(type) {
        var absName = type.toString();
        var split = splitHelper(absName, ".");
        return split[split.size() - 1];
   }

   def constructorMethod(className, type, method) {
        var delegateCall = type + "." + injectParamsToMethodCall(method);
        var currentClass = genGoloModuleName(type) + "." + className + ".class";
        var castObjectTo = splitHelper(method.toString(), " ")[0];
        var call = "return (" + castObjectTo + ")InternalHelper.safeCreate("+delegateCall+", "+ currentClass+")";
        return call;
   }

   def injectParamsToMethodCall(method) {
        var call = "";
        call = method.name + "(";
        var params = method.params;
        var p;
        for(int i = 0; i < params.size(); i++) {
            p = splitHelper(params.get(i).name, " ");
            call = call + p[0];
            if(i < params.size() - 1) {
                call = call + ", ";
            }
        }
        return call + ")";
   }

   def isConstructorMethod(type, method) {
        if(method.staticMethod) {
            var cp = splitHelper(method.toString(), " ");
            var class = cp[0];
            if(class.equals(type.toString())) {
                return true;
            }
        }
        return false;
   }

   def callForOriginalAPI(className, type, method) {
        if(isConstructorMethod(type, method)) {
            return constructorMethod(className, type, method);
        }
        var call;
        var returnTypes = splitHelper(method.toString(), " ");
        if(returnTypes[0].equals("void") || returnTypes[1].equals("void")) {
            call = "";
        } else  if(returnTypes.size() > 2 && returnTypes[2].equals("void")){
            call = "return ";
        } else {
            call = "return (" + method.returnType + ")";
        }
        if(method.staticMethod) {
            call = call + type.toString() + ".";
        } else {
            call = call + "delegate.";
        }
        call = call + injectParamsToMethodCall(method);
        return call;
   }

   def createMethodDefinition(type, method) {
        if(method.staticMethod) {
            return "static " + method;
        }
        return typeCheck(method);
   }

   def findUniqueFunctionName(functionNames, method) {
        if(method.params == empty) {
            functionNames.add(method.name);
            return method.name;
        }
        var nameIsFree = true;
        var currentName = "";
        for(int y=0; y < functionNames.size(); y++) {
            currentName = functionNames.get(y);
            if(currentName == method.name) {
                nameIsFree = false;
            }
        }
        if(nameIsFree) {
            functionNames.add(method.name);
            return method.name;
        }
        var name = method.name + "By";
        var mini = "";
        for (int i =0; i < method.params.size(); i++) {
           mini = method.params.get(i).name;
           name += mini.substring(0,1).toUpperCase() + mini.substring(1,mini.length());
           if(i != method.params.size() -1) {
                name += "And";
           }
        }
        return name;
   }
}

package @{genGoloModuleName(type)};\n\n

import io.vertx.lang.golo.InternalHelper;\n\n
@foreach{referencedType : referencedTypes}
import @{referencedType};\n
@end{}

// @{type} \n

public class @{className(type)} { \n\n

private @{type.raw} delegate; \n
@comment{"Next rows defines the constructor"}
public @{className(type.raw)}(Object delegate) { \n
    this.delegate = (@{type.raw})delegate; \n
}\n
public Object getDelegate() { \n
    return delegate; \n
}\n

@declare{'genMethodDispatch'}
	@foreach{method:methods}
// @{method} \n
@code{methodDefinition = createMethodDefinition(type, method)}
public @{methodDefinition} {\n
    @code{
        var cName = className(type);
        callOrgAPI = callForOriginalAPI(cName, type, method);
    }
    @{callOrgAPI}; \n
}\n
@end{}
}\n
@end{}

@includeNamed{'genMethodDispatch';functionNames=new java.util.ArrayList()}